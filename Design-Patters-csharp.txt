==================== Design Patterns ==================== 

================ Criação ========================

//Singleton
	Problemas a serem resolvidos:
	- Controlar acesso as instancias da classe garantindo que seja instanciada apenas uma vez
	- Reduzir utilizacao da memoria
	- Fornecer mais flexibilidade que a utilizacao de estruturas estaticas

	Ex.: Jogo de futebol:
		Somente uma bola é permitida no jogo. (somente uma instancia)


//Factory method
"Abstracao nao deve depender de detalhes
detalhes eh quem deve depender de abstracoes"

	Problemas a serem resolvidos:
	- Eu nao posso antecipar o tipo da classe de objeto que deve ser criada. Pois, tenho objetos de varios tipos.
	- Preciso delegar a responsabilidade para que as subclasses especifiquem os objetos que criam

- Tambem conhecido como Construtor Virtual, o objetivo desse padrao eh a possibilidade
de criar uma fabrica de objetos em tempo de execucao e deixar
que o objeto decida seu tipo dinamicamente.

- O factory method dispoe uma interface que cria um objeto,
mas sao as subclasses que irao decidir qual classe concreta instanciar

	Ex.: Jogo Mortal Kombat
		- Varios personagens podem ser escolhidos

//Abstract Factory
Cria uma instancia de varias familias de classes

	Ex.: Montar carro em tempo de execucao	
		- Usuario vai selecionar montar roda luxo ou basica


//Builder
Separe a construcao de um objeto complexo de sua representacao para que o mesmo 
processo de construcao possa criar diferentes representacoes

O padrao eh composto por quatro componentes basicos que sao a Interface (ou classe abstrata) 
Builder, o concrete builder (construtor concreto), o Director (Diretor) e o product (produto) 


//Prototype
O padrão Prototype é aplicado quando existe a necessidade de clonar, literalmente, um objeto. 
Ou seja, quando a aplicação precisa criar cópias exatas de algum objeto em tempo de execução este 
padrão é altamente recomendado. Este padrão pode ser utilizado em sistemas que precisam ser 
independentes da forma como os seus componentes são criados, compostos e representados. 
O padrão Prototype pode ser útil em sistemas com as seguintes características:

- sistemas que utilizam classes definidas em tempo de execução;
- sistemas que utilizam o padrão Abstract Factory para criação de objetos. 
Neste caso, a hierarquia de classes pode se tornar muito complexa e o padrão Prototype 
pode ser uma alternativa mais simples, por realizar a mesma tarefa com um número reduzido 
de classes;
- sistemas que possuem componentes cujo estado inicial possui poucas variações e onde é 
conveniente disponibilizar um conjunto preestabelecido de protótipos que dão origem aos 
objetos que compõem o sistema

public IFuncionario Clone()
        {
            return this.MemberwiseClone() as IFuncionario;
        }

Uma das principais vantagens de sua utilização é quando a inicialização de um objeto pode 
se tornar custosa, e você quer fazer algumas pequenas variações ao inicializar. 
Nesse contexto, o Prototype pode então evitar a criação "do zero" de novos objetos.


=================== Estrutural =====================================
//Adapter
Cria uma classe que faz uma adaptacao.
Converta a interface de uma classe em outra interface que os clientes esperam.
Vantagens:
Adapter de classe: permite que o adaptador sobrescreva
Adapter de objeto: permite o uso de um unico adaptador p/ uma hierarquia de classes adptadas
Desvantagens:
Adapter de classe:  nao funciona bem quando se quer adaptar uma hierarquia de classes
Adapter de objeto: eh mais dificil sobrescrever funcoes do adaptado


//Bridge
Desacoplar uma abstracao de sua implementacao para que os dois possam
variar independentemente


//Composite 
Compor objetos em estruturas de arvore para representar hierarquias de
partes inteiras. Composite permite que os clientes tratem objetos individuais
e composicoes de objetos de maneira uniforme.

//Decorator
Anexar responsabilidades adicionais a um objeto dinamicamente. Os decoradores
fornecem uma alternativa flexivel a subclasse para estenter a funcionalidade.

//Facade
Fornecer uma interface unificada para um conjunto de interfaces em um
subsistema. O Facade define uma interface de nivel superior que facilita
o uso do subsistema

//Flyweight
(peso mosca)
O objetivo eh melhorar o desempenho de um procedimento compartilhando objetos
com caracteristicas parecidas.
Caracteristicas: 
	Intrinsicas: propriedades imutaveis, ou seja, que caracterizam o objeto compartilhado
	Extrinsecas: propriedades variaveis que podem receber novos valores a cada acesso
Ex.: Jogo Super Mario (existem varios cascos de tartarugas de cores diferentes no jogo)
Casco de tartaruga:
intrinseca: todos sao cascos de tartaruga
extrinseca: cada casco tem sua cor

//Proxy
Fornecer um susbtituto ou espaco reservado para outro objeto para 
controlar o acesso a ele


================ Comportamento ========================

//Chain of Responsibility
Uma maneira de passar uma requisicao entre uma cadeia de objetos
Evite acoplar o remetente de uma solicitacao ao seu receptor, dando a mais
de um objeto a chance de manipular a solicitacao. Encadeie os objetos
de recebimento e passe a solicitacao ao longo da cadeia ate que um
objeto a manipule


//Command
Encapsule uma solicitacao como um objeto, permitindo assim que voce faca
a parametrizacao de clientes com diferentes solicitacoes, enfileire ou
registre solicitacoes, e de suporte a operacoes que podem ser desfeitas

//Interpreter
Dada um linguagem, defina uma representacao para sua gramatica junto com
um interprete que use a representacao para interpretar sentencas na linguagem

//Iterator
Sequencialmente acessa os elementos de uma colecao.
Fornece uma maneira de acessar os elementos de um objeto agregado
sequencialmente sem expor sua representacao subjacente.

//Mediator
Defina um objeto que encapsule como um conjunto de objetos interage. O mediador
promove um acoplamento felixivel impedindo que os objetos se refiram explicitamente
e permite que voce varie sua interacao de forma independente.


//Memento
Captura e restaura o estado interno de um objeto.
Sem violar o encapsulamento, capture e externalize o estado interno de um
objeto para que o objeto possa ser restaurado posteriormente para
esse estado.

//Observer
Uma maneira de notificar a mudanca para um numero de classes.
Defina uma dependencia um-para-muitos entre objetos para que, quando um 
objeto mudar de estado, todos os seus dependentes sejam notificados e
atualizados automaticamente.

//State
Altera o comportamento de um objeto quando seu estado se altera.
Permitir que um objeto altere seu comportamento quando seu estado interno 
eh alterado. O objeto aparecera para mudar sua classe

//Strategy
Defina uma familia de algoritmos, encapsule cada um deles e torne-os intercambiaveis. 
A estrategia permite que o algoritmo varie independentemente dos clientes que o
usam.

//Template Method
Adia as etapas exatas de um algoritmo para uma subclasse.
Defina o esqueleto de um algoritmo em uma operacao, adiando algumas etapas para 
subclasses. Template Method permite que as subclasses redefinam certas 
etapas de um algoritmo sem alterar a estrutura do algoritmo.

//Visitor
Define uma nova operacao para uma classe sem alteracao.
Representa uma operacao a ser executada nos elementos de uma estrutura de
objeto. Visitante permite definir uma nova operacao sem alterar as classes
dos elementos em que ela opera.


//Dependency Injection
Em linhas gerais este padrao eh uma das formas de implementar um outro
padro - Inversao de controle
Devemos utilizar esse padrao quando temos a necessidade de desenvolver
sistemas em que o nivel de acoplamento entre seus diferentes modulos
precisem ser extremamente baixos.

Vantagens:
- Oferecer reusabilidade de componenetes, uma vez que criamos compenentes
interdependentes, eles podem ser facilmente implementados em sistemas diversos.
- Facilitar a manutencao de sistemas, fazendo com que as manutencoes em 
modulos nao afetem o restante do sistema
- Criar codigos altamente testaveis. Uma vez que temos codigos implementados
seguindo esse Pattern, podemos testa-los mais facilmente utilizando os mock tests
- Criar codigos mais legiveis, o que torna mais facil a compreencao do sistema
como um todo.

Modos de implementacao:
- Construtor: implementa injecao de dependencia na definicao dos construtores das classes
- Getter and Setter:  implementa na definicao dos Gets e Sets das classes
- Interface Implementation: Usa a definicao de interfaces para realizar a injecao de dependencia
- Service Locator: Construimos classes que servem como localizadoras de objetos que instaciaremos em outras classes

