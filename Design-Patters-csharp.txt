==================== Design Patterns ==================== 

================ Criação ========================

//Singleton
	Problemas a serem resolvidos:
	- Controlar acesso as instancias da classe garantindo que seja instanciada apenas uma vez
	- Reduzir utilizacao da memoria
	- Fornecer mais flexibilidade que a utilizacao de estruturas estaticas

	Ex.: Jogo de futebol:
		Somente uma bola é permitida no jogo. (somente uma instancia)


//Factory method
"Abstracao nao deve depender de detalhes
detalhes eh quem deve depender de abstracoes"

	Problemas a serem resolvidos:
	- Eu nao posso antecipar o tipo da classe de objeto que deve ser criada. Pois, tenho objetos de varios tipos.
	- Preciso delegar a responsabilidade para que as subclasses especifiquem os objetos que criam

- Tambem conhecido como Construtor Virtual, o objetivo desse padrao eh a possibilidade
de criar uma fabrica de objetos em tempo de execucao e deixar
que o objeto decida seu tipo dinamicamente.

- O factory method dispoe uma interface que cria um objeto,
mas sao as subclasses que irao decidir qual classe concreta instanciar

	Ex.: Jogo Mortal Kombat
		- Varios personagens podem ser escolhidos

//Abstract Factory
Cria uma instancia de varias familias de classes

	Ex.: Montar carro em tempo de execucao	
		- Usuario vai selecionar montar roda luxo ou basica


//Builder
Separe a construcao de um objeto complexo de sua representacao para que o mesmo 
processo de construcao possa criar diferentes representacoes

O padrao eh composto por quatro componentes basicos que sao a Interface (ou classe abstrata) 
Builder, o concrete builder (construtor concreto), o Director (Diretor) e o product (produto) 


//Prototype
O padrão Prototype é aplicado quando existe a necessidade de clonar, literalmente, um objeto. 
Ou seja, quando a aplicação precisa criar cópias exatas de algum objeto em tempo de execução este 
padrão é altamente recomendado. Este padrão pode ser utilizado em sistemas que precisam ser 
independentes da forma como os seus componentes são criados, compostos e representados. 
O padrão Prototype pode ser útil em sistemas com as seguintes características:

- sistemas que utilizam classes definidas em tempo de execução;
- sistemas que utilizam o padrão Abstract Factory para criação de objetos. 
Neste caso, a hierarquia de classes pode se tornar muito complexa e o padrão Prototype 
pode ser uma alternativa mais simples, por realizar a mesma tarefa com um número reduzido 
de classes;
- sistemas que possuem componentes cujo estado inicial possui poucas variações e onde é 
conveniente disponibilizar um conjunto preestabelecido de protótipos que dão origem aos 
objetos que compõem o sistema

public IFuncionario Clone()
        {
            return this.MemberwiseClone() as IFuncionario;
        }

Uma das principais vantagens de sua utilização é quando a inicialização de um objeto pode 
se tornar custosa, e você quer fazer algumas pequenas variações ao inicializar. 
Nesse contexto, o Prototype pode então evitar a criação "do zero" de novos objetos.


=================== Estrutural =====================================
//Adapter
Cria uma classe que faz uma adaptacao.
Converta a interface de uma classe em outra interface que os clientes esperam.
Vantagens:
Adapter de classe: permite que o adaptador sobrescreva
Adapter de objeto: permite o uso de um unico adaptador p/ uma hierarquia de classes adptadas
Desvantagens:
Adapter de classe:  nao funciona bem quando se quer adaptar uma hierarquia de classes
Adapter de objeto: eh mais dificil sobrescrever funcoes do adaptado


//Bridge
Desacoplar uma abstracao de sua implementacao para que os dois possam
variar independentemente


//Composite 
Compor objetos em estruturas de arvore para representar hierarquias de
partes inteiras. Composite permite que os clientes tratem objetos individuais
e composicoes de objetos de maneira uniforme.

//Decorator
Anexar responsabilidades adicionais a um objeto dinamicamente. Os decoradores
fornecem uma alternativa flexivel a subclasse para estenter a funcionalidade.

//Facade
Fornecer uma interface unificada para um conjunto de interfaces em um
subsistema. O Facade define uma interface de nivel superior que facilita
o uso do subsistema